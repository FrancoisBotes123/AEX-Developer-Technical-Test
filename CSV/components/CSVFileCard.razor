@using CSV.Interfaces
@using CSV.Models
@using CSV.components
@using CSV.Models.CSV
@using System.Text
@using System.Data

@inject IConfirmDialogService ConfirmDialogService
@inject ICSVFileService CSVFileService

<div class="card">
    <div class="card-body">
        <h5 class="card-title">@FileName</h5>
        <p class="card-text">@UploadedTime.ToString("g")</p>
        <button @onclick="ShowViewFile" class="btn btn-secondary">View</button>
        <button @onclick="ShowDeleteConfirmation" class="btn btn-danger">Delete</button>
    </div>
</div>

@if (showViewModal)
{
    <ViewFileModal IsVisible="@showViewModal" CsvFileId="@Id" IsVisibleChanged="HideViewFileModal" />
}



@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string FileName { get; set; }
    [Parameter] public DateTime UploadedTime { get; set; }
    [Parameter] public EventCallback<int> OnView { get; set; }
    [Parameter] public EventCallback<int> OnDelete { get; set; }


    private bool showViewModal = false;
    private List<string> columnNames = new List<string>();
    private List<List<string>> rows = new List<List<string>>();

    private async Task ShowDeleteConfirmation()
    {
        bool confirmed = await ConfirmDialogService.ShowDialog("Confirm Delete", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            await OnDelete.InvokeAsync(Id);
        }
    }

    private void HideViewFileModal(bool isVisible)
    {
        showViewModal = isVisible;
    }
    private async Task ShowViewFile()
    {
        await OnView.InvokeAsync(Id);
    }
    
    /*private async Task ShowViewFile()
    {
        var csvData = await LoadCsvData(Id);
        columnNames = csvData.Item1;
        rows = csvData.Item2;
        showViewModal = true;
    }*/

    private async Task<(List<string>, List<List<string>>)> LoadCsvData(int id)
    {
        // This is a simplified example; you will need to adjust this to your actual data structure
        var csvFile = await CSVFileService.GetCSVFileByIdAsync(id);

        // Assuming you have a method to parse the CSV file into column names and rows
        var parsedCsvData = ParseCsv(csvFile.Content);

        return parsedCsvData;
    }

    private (List<string>, List<List<string>>) ParseCsv(byte[] csvContent)
    {
        var result = (ColumnNames: new List<string>(), Rows: new List<List<string>>());
        var csvString = Encoding.UTF8.GetString(csvContent);

        using (var reader = new StringReader(csvString))
        {
            string line;
            bool isFirstLine = true;
            while ((line = reader.ReadLine()) != null)
            {
                var values = line.Split(',');
                if (isFirstLine)
                {
                    result.ColumnNames.AddRange(values);
                    isFirstLine = false;
                }
                else
                {
                    result.Rows.Add(new List<string>(values));
                }
            }
        }

        return result;
    }

}
