@using CSV.Interfaces
@using CSV.Models
@using CSV.components
@using CSV.Models.CSV

@inject IConfirmDialogService ConfirmDialogService
@inject ICSVFileService CSVFileService


<div class="card">
    <div class="card-body">
        <h5 class="card-title">@FileName</h5>
        <p class="card-text">@UploadedTime.ToString("g")</p>
        <button @onclick="() => ShowModal(true)" class="btn btn-secondary">Edit</button>
        <button @onclick="ShowDeleteConfirmation" class="btn btn-danger">Delete</button>
    </div>
</div>

@if (showEditModal)
{
    <CSVFileEditModal CsvFile="@csvFile" OnClose="() => ShowModal(false)" />
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string FileName { get; set; }
    [Parameter] public DateTime UploadedTime { get; set; }
    [Parameter] public EventCallback<int> OnEdit { get; set; }
    [Parameter] public EventCallback<int> OnDelete { get; set; }

    private CsvFile csvFile = new CsvFile(); // Presumably loaded with actual data somewhere in your code
    private bool showEditModal = false;

    private async Task ShowDeleteConfirmation()
    {
        bool confirmed = await ConfirmDialogService.ShowDialog("Confirm Delete", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            await OnDelete.InvokeAsync(Id);
        }
    }

    private async Task ShowModal(bool show)
    {
        showEditModal = show;
        if (show)
        {
            // Load the CsvFile here if it hasn't been loaded yet
            csvFile = await LoadCsvFile(Id);
        }
        StateHasChanged(); // Refresh the UI to show or hide the modal
    }

    // This method should be implemented to load the CsvFile from your API by Id
    private async Task<CsvFile> LoadCsvFile(int id)
    {
        return await CSVFileService.GetCSVFileByIdAsync(id);
    }
}
