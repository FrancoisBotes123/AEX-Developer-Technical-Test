@page "/csvfiles"
@using Blazored.Modal
@using Blazored.Modal.Services
@using CSV.Interfaces
@using CSV.Models.CSV
@using CSV.components
@using System.Data

@inject ICSVFileService CSVFileService



@if (!showViewModal)
{
    <h1>CSV Files</h1>
    // Only show the CSV file list if showViewModal is false
    if (csvFiles == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div style="align-content:end">
            <label for="fileInput" class="btn btn-primary">Add New File</label>
            <InputFile id="fileInput" OnChange="@OnInputFileChange" style="display:none" />


        </div>

        foreach (var csvFile in csvFiles)
        {
            <CSVFileCard Id="@csvFile.Id"
                         FileName="@csvFile.FileName"
                         UploadedTime="@csvFile.UploadedTime"
                         OnView="(() => ShowViewFile(csvFile.Id))"
                         OnDelete="(() => DeleteFile(csvFile.Id))" />
        }
    }
}

@if (showViewModal)
{
    <ViewFileModal CsvFileId="@selectedCsvFileId" IsVisible="@showViewModal" IsVisibleChanged="HideViewFileModal" OnSave="RefreshFileList" />
}



@code {
    private List<CsvFileDto> csvFiles;
    private bool showViewModal = false;
    private int selectedCsvFileId;
    private ElementReference inputFileRef;
    protected override async Task OnInitializedAsync()
    {
        csvFiles = await CSVFileService.GetCSVFilesAsync();
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Ensure it's a CSV file
            if (file.ContentType == "text/csv" || file.Name.EndsWith(".csv"))
            {
                // Read the file content into a stream
                using var stream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(stream);

                // Make sure we're at the start of the stream for reading
                stream.Position = 0;

                // Convert the stream to a DataTable or byte array as needed
                // This assumes you have a method to convert the stream to a DataTable
                var dataTable = ConvertStreamToDataTable(stream);

                // Call the service to upload the file
                var result = await CSVFileService.UploadCSVFileAsync(file.Name,dataTable);

                if (result)
                {
                    // Refresh the file list to include the newly uploaded file
                    await RefreshFileList();
                }
                else
                {
                    // Handle the failure scenario
                }
            }
            else
            {
                // Inform the user they can only upload CSV files
            }
        }
    }

    private void ShowViewFile(int id)
    {
        selectedCsvFileId = id; // Set the ID of the selected file
        showViewModal = true;   // Show the modal
    }

    private void EditFile(int id)
    {
    }
    private void HideViewFileModal(bool isVisible)
    {
        showViewModal = !isVisible; // Hide the modal and show the CSV file list
        StateHasChanged(); // Re-render the component
    }
    private async Task RefreshFileList()
    {
        csvFiles = await CSVFileService.GetCSVFilesAsync();
        showViewModal = false; // Hide the ViewFileModal
        StateHasChanged(); // Update the UI to show the list of files
    }
    private async Task DeleteFile(int id)
    {
        await CSVFileService.DeleteCSVFileAsync(id);
        RefreshFileList();
    }
    private DataTable ConvertStreamToDataTable(Stream stream)
    {
        DataTable dataTable = new DataTable();
        stream.Position = 0; // Reset stream position to the beginning

        using (var reader = new StreamReader(stream))
        {
            // Read the first line to create the DataTable columns
            var headers = reader.ReadLine().Split(',');
            foreach (var header in headers)
            {
                dataTable.Columns.Add(header);
            }

            // Read the remaining lines to add rows to the DataTable
            while (!reader.EndOfStream)
            {
                var fields = reader.ReadLine().Split(',');
                DataRow dataRow = dataTable.NewRow();
                dataRow.ItemArray = fields;
                dataTable.Rows.Add(dataRow);
            }
        }

        return dataTable;
    }

}