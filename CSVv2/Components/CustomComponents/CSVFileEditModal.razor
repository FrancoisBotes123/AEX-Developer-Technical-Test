@using CSVv2.Interfaces
@using CSVv2.Models.CSV


@inject ICSVFileService CSVFileService


        <EditForm Model="@csvFile" OnValidSubmit="@SaveCSVFile">
            <div class="mb-3">
                <label for="fileName" class="form-label">File Name:</label>
                <InputText id="fileName" class="form-control" @bind-Value="csvFile.FileName" />
            </div>
            <div class="mb-3">
                <label for="uploadTime" class="form-label">Upload Time:</label>
                <!-- Displaying the date as text since it's not editable -->
                <p id="uploadTime" class="form-control-plaintext">@csvFile.UploadedTime.ToString("g")</p>
            </div>
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>


@code {
    [Parameter] public int CsvFileId { get; set; } // Add this line

    private CsvFileDto csvFile = new CsvFileDto();

    protected override async Task OnInitializedAsync()
    {
        if (CsvFileId != 0) // Assuming 0 means a new CSV file
        {
            csvFile = await CSVFileService.GetCSVFileByIdAsync(CsvFileId);
        }
    }

    private async Task SaveCSVFile()
    {
        await CSVFileService.UpdateCSVFileAsync(csvFile);
        //BlazoredModal.Close(ModalResult.Ok(csvFile)); // Close the modal and optionally return the updated CSV file
    }

    private void Cancel()
    {
        // BlazoredModal.Close(); // Just close the modal without saving
    }
}
